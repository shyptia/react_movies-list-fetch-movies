{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","memo","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onAdd","useState","setQuery","setMovie","isLoading","setIsLoading","isErrorOnLoading","setErrorOnLoading","isFilmInList","setIsFilmInList","handleSubmit","event","a","preventDefault","loadedMovieData","newMovie","Title","Plot","Poster","imdbID","moviesImdbId","useMemo","film","handleAddMovie","movieToAdd","includes","onSubmit","htmlFor","type","id","placeholder","value","onChange","target","cn","disabled","trim","onClick","App","setMovies","addMovie","useCallback","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5317ba11.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = memo(({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n));\n","import React, { memo } from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = memo(({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n));\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=2c882664';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { memo, useMemo, useState } from 'react';\nimport './FindMovie.scss';\nimport cn from 'classnames';\n\nimport { MovieCard } from '../MovieCard/MovieCard';\nimport { Movie } from '../../types/Movie';\nimport { getMovie } from '../../api';\n\ntype Props = {\n  movies: Movie[];\n  onAdd: (newMovie: Movie) => void;\n};\n\nconst defaultImg = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\nexport const FindMovie: React.FC<Props> = memo(({ movies, onAdd }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isErrorOnLoading, setErrorOnLoading] = useState(false);\n  const [isFilmInList, setIsFilmInList] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const loadedMovieData = await getMovie(query);\n\n    if ('Error' in loadedMovieData) {\n      setErrorOnLoading(true);\n    } else {\n      const newMovie = {\n        title: loadedMovieData.Title,\n        description: loadedMovieData.Plot,\n        imgUrl: loadedMovieData.Poster !== 'N/A'\n          ? loadedMovieData.Poster\n          : defaultImg,\n        imdbUrl: `https://www.imdb.com/title/${loadedMovieData.imdbID}`,\n        imdbId: loadedMovieData.imdbID,\n      };\n\n      setMovie(newMovie);\n    }\n\n    setIsLoading(false);\n  };\n\n  const clearFormOnAddMovie = () => {\n    setQuery('');\n    setMovie(null);\n  };\n\n  const handleInputChange = (value: string) => {\n    if (isFilmInList) {\n      setIsFilmInList(false);\n    }\n\n    setQuery(value);\n\n    if (isErrorOnLoading) {\n      setErrorOnLoading(false);\n    }\n  };\n\n  const moviesImdbId = useMemo(() => (\n    movies.map(film => film.imdbId)\n  ), [movies]);\n\n  const handleAddMovie = (movieToAdd: Movie) => {\n    if (!moviesImdbId.includes(movieToAdd.imdbId)) {\n      onAdd(movieToAdd);\n    } else {\n      setIsFilmInList(true);\n    }\n\n    clearFormOnAddMovie();\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => handleInputChange(event.target.value)}\n            />\n          </div>\n\n          {isErrorOnLoading && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn(\n                'button is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={!query.trim()}\n            >\n              {movie ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => handleAddMovie(movie)}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n\n        {isFilmInList && (\n          <p className=\"help is-danger\">There is this film in the list</p>\n        )}\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n});\n","import { useCallback, useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = useCallback((newMovie: Movie) => {\n    setMovies(current => [\n      ...current,\n      newMovie,\n    ]);\n  }, []);\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}