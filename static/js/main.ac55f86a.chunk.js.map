{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","onAdd","useState","setQuery","setMovie","isLoading","setIsLoading","isErrorOnLoading","setErrorOnLoading","handleSubmit","event","a","preventDefault","loadedMovieData","newMovie","Title","Plot","Poster","imdbID","clearFormOnAddMovie","undefined","moviesImdbId","film","onSubmit","htmlFor","type","id","placeholder","value","onChange","currentTarget","cn","disabled","trim","onClick","includes","App","setMovies","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ac55f86a.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=2c882664';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport cn from 'classnames';\n\nimport { MovieCard } from '../MovieCard/MovieCard';\nimport { Movie } from '../../types/Movie';\nimport { getMovie } from '../../api';\n\ntype Props = {\n  movies: Movie[];\n  onAdd: (newMovie: Movie) => void;\n};\n\nconst defaultImg = 'https://via.placeholder.com/360x270.png?text=no%20preview';\n\nexport const FindMovie: React.FC<Props> = ({ movies, onAdd }) => {\n  const [query, setQuery] = useState('');\n  const [movie, setMovie] = useState<Movie>();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isErrorOnLoading, setErrorOnLoading] = useState(false);\n\n  const handleSubmit = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    const loadedMovieData = await getMovie(query);\n\n    if ('Error' in loadedMovieData) {\n      setErrorOnLoading(true);\n    } else {\n      const newMovie = {\n        title: loadedMovieData.Title,\n        description: loadedMovieData.Plot,\n        imgUrl: loadedMovieData.Poster !== 'N/A'\n          ? loadedMovieData.Poster\n          : defaultImg,\n        imdbUrl: `https://www.imdb.com/title/${loadedMovieData.imdbID}`,\n        imdbId: loadedMovieData.imdbID,\n      };\n\n      setMovie(newMovie);\n    }\n\n    setIsLoading(false);\n  };\n\n  const clearFormOnAddMovie = () => {\n    setQuery('');\n    setMovie(undefined);\n  };\n\n  const moviesImdbId = movies.map(film => film.imdbId);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={(event) => handleSubmit(event)}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => {\n                setQuery(event.currentTarget.value);\n                setErrorOnLoading(false);\n              }}\n            />\n          </div>\n\n          {isErrorOnLoading && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={cn(\n                'button is-light',\n                { 'is-loading': isLoading },\n              )}\n              disabled={!query.trim()}\n            >\n              {(isErrorOnLoading || movie) ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          {movie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  if (moviesImdbId.includes(movie.imdbId)) {\n                    clearFormOnAddMovie();\n                  } else {\n                    onAdd(movie);\n                    clearFormOnAddMovie();\n                  }\n                }}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies(current => [\n      ...current,\n      newMovie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          movies={movies}\n          onAdd={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}